[
  {
    "id": 1,
    "title": "Reverse String with Bug",
    "language": "C++",
    "code": "void reverseString(vector<char>& s) {\n    int left = 0, right = s.size();\n    while (left < right) {\n        swap(s[left], s[right]);\n        left++;\n        right--;\n    }\n}",
    "hint": "Watch your `right` pointer’s initial value and usage.",
    "ans": "`right` should start at `s.size() - 1`, not `s.size()` (off-by-one).",
    "expectedOutput": "For s = ['h','e','l','l','o'] → ['o','l','l','e','h']",
    "link": "https://leetcode.com/problems/reverse-string/"
  },
  {
    "id": 2,
    "title": "Valid Anagram with Bug",
    "language": "C++",
    "code": "bool isAnagram(string s, string t) {\n    if (s.length() != t.length()) return false;\n    vector<int> cnt(26, 0);\n    for (char c : s) cnt[c - 'a']++;\n    for (char c : t) cnt[c - 'a']--;\n    for (int x : cnt)\n        if (x != 1)\n            return false;\n    return true;\n}",
    "hint": "After decrementing, what value indicates mismatch?",
    "ans": "The check should be `x != 0`, not `x != 1`.",
    "expectedOutput": "s = \"anagram\", t = \"nagaram\" → true",
    "link": "https://leetcode.com/problems/valid-anagram/"
  },
  {
    "id": 3,
    "title": "Move Zeroes with Bug",
    "language": "C++",
    "code": "void moveZeroes(vector<int>& nums) {\n    int lastNonZero = 0;\n    for (int i = 0; i < nums.size(); ++i) {\n        if (nums[i] != 0) {\n            swap(nums[lastNonZero], nums[i]);\n            lastNonZero = i;\n        }\n    }\n}",
    "hint": "The index of the next swap target isn’t being tracked correctly.",
    "ans": "`lastNonZero` should be incremented (`lastNonZero++`), not set to `i`.",
    "expectedOutput": "[0,1,0,3,12] → [1,3,12,0,0]",
    "link": "https://leetcode.com/problems/move-zeroes/"
  },
  {
    "id": 4,
    "title": "Contains Duplicate II with Bug",
    "language": "C++",
    "code": "bool containsNearbyDuplicate(vector<int>& nums, int k) {\n    unordered_map<int,int> last;\n    for (int i = 0; i < nums.size(); ++i) {\n        if (last.count(nums[i]) && i - last[nums[i]] <= k)\n            return true;\n        last[nums[i]] = i;\n    }\n    return false;\n}",
    "hint": "Consider the inequality boundary for duplicates exactly k apart.",
    "ans": "Should use `< k` instead of `<= k` if LeetCode defines distance strictly less.",
    "expectedOutput": "[1,2,3,1], k=3 → true",
    "link": "https://leetcode.com/problems/contains-duplicate-ii/"
  },
  {
    "id": 5,
    "title": "Search in Rotated Sorted Array with Bug",
    "language": "C++",
    "code": "int search(vector<int>& nums, int target) {\n    int l = 0, r = nums.size() - 1;\n    while (l < r) {\n        int m = (l + r) / 2;\n        if (nums[m] == target) return m;\n        if (nums[l] <= nums[m]) {\n            if (target >= nums[l] && target < nums[m]) r = m - 1;\n            else l = m + 1;\n        } else {\n            if (target > nums[m] && target <= nums[r]) l = m + 1;\n            else r = m - 1;\n        }\n    }\n    return -1;\n}",
    "hint": "Check the loop condition boundary for one-element search.",
    "ans": "Should use `while (l <= r)` so single-element range still checks.",
    "expectedOutput": "[4,5,6,7,0,1,2], target=0 → 4",
    "link": "https://leetcode.com/problems/search-in-rotated-sorted-array/"
  },
  {
    "id": 6,
    "title": "Group Anagrams with Bug",
    "language": "C++",
    "code": "vector<vector<string>> groupAnagrams(vector<string>& strs) {\n    unordered_map<string, vector<string>> mp;\n    for (auto& s : strs) {\n        string t = s;\n        sort(t.begin(), t.end());\n        mp[s].push_back(s);\n    }\n    vector<vector<string>> res;\n    for (auto& p : mp)\n        res.push_back(p.second);\n    return res;\n}",
    "hint": "Which map key did you intend to index on?",
    "ans": "Should use `mp[t]`, not `mp[s]`, when pushing back.",
    "expectedOutput": "[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"] → [[eat,tea,ate],[tan,nat],[bat]]",
    "link": "https://leetcode.com/problems/group-anagrams/"
  },
  {
    "id": 7,
    "title": "Kth Largest Element with Bug",
    "language": "C++",
    "code": "int findKthLargest(vector<int>& nums, int k) {\n    int n = nums.size();\n    for (int i = 0; i < k; ++i) {\n        int max_i = i;\n        for (int j = i+1; j < n; ++j)\n            if (nums[j] > nums[max_i]) max_i = j;\n        swap(nums[i], nums[max_i]);\n    }\n    return nums[k];\n}",
    "hint": "Arrays are zero-based—watch the index you return.",
    "ans": "Should return `nums[k-1]`, not `nums[k]`.",
    "expectedOutput": "[3,2,1,5,6,4], k=2 → 5",
    "link": "https://leetcode.com/problems/kth-largest-element-in-an-array/"
  },
  {
    "id": 8,
    "title": "First Missing Positive with Bug",
    "language": "C++",
    "code": "int firstMissingPositive(vector<int>& nums) {\n    int n = nums.size();\n    for (int i = 0; i < n; ++i) {\n        while (nums[i] > 0 && nums[i] <= n && nums[nums[i] - 1] != nums[i]) {\n            swap(nums[i], nums[nums[i] - 1]);\n        }\n    }\n    for (int i = 1; i <= n; ++i) {\n        if (nums[i - 1] != i) return i;\n    }\n    return n;\n}",
    "hint": "What if all 1…n are present? Check your final return.",
    "ans": "Should return `n+1` if all positions have correct values, not `n`.",
    "expectedOutput": "[1,2,0] → 3",
    "link": "https://leetcode.com/problems/first-missing-positive/"
  },
  {
    "id": 9,
    "title": "Search a 2D Matrix II with Bug",
    "language": "C++",
    "code": "bool searchMatrix(vector<vector<int>>& mat, int target) {\n    int m = mat.size(), n = mat[0].size();\n    int i = 0, j = n - 1;\n    while (i < m && j >= 0) {\n        if (mat[i][j] == target) return true;\n        if (mat[i][j] < target) j++;\n        else i++;\n    }\n    return false;\n}",
    "hint": "What should you return when you exhaust all options without finding it?",
    "ans": "the line [if (mat[i][j] < target) j++;] must be like -> if (mat[i][j] > target) j--;",
    "expectedOutput": "[\n  [1,4,7,11,15],\n  [2,5,8,12,19],\n  [3,6,9,16,22],\n  [10,13,14,17,24],\n  [18,21,23,26,30]\n], target=5 → true",
    "link": "https://leetcode.com/problems/search-a-2d-matrix-ii/"
  },
  {
    "id": 10,
    "title": "First Unique Character in a String with Bug",
    "language": "C++",
    "code": "int firstUniqChar(string s) {\n    vector<int> cnt(26, 0);\n    for (char c : s) cnt[c - 'a']++;\n    for (int i = 0; i < s.size(); ++i) {\n        if (cnt[s[i] - 'a'] == 2) // ❌ with Bug: Checks for count == 2 instead of 1\n            return i;\n        // 🔧 Should be: if (cnt[s[i] - 'a'] == 1)\n    }\n    return -1;\n}",
    "hint": "What if the string contains uppercase or other characters?",
    "ans": "Should be: if (cnt[s[i] - 'a'] == 1)",
    "expectedOutput": "s = \"loveleet\" → 2",
    "link": "https://leetcode.com/problems/first-unique-character-in-a-string/"
  },
  {
    "id": 11,
    "title": "Peak Index in a Mountain Array with Bug",
    "language": "C++",
    "code": "int peakIndexInMountainArray(vector<int>& A) {\n    int l = 0, r = A.size() - 1;\n    while (l < r) {\n        int m = (l + r) / 2;\n        if (A[m] > A[m + 1]) r = m;\n        else l = m;\n    }\n    return l;\n}",
    "hint": "Watch how you move `l` when the middle is on the increasing slope.",
    "ans": "When `A[m] <= A[m+1]`, you must set `l = m + 1`, not `l = m`, or else infinite loop on two-element slopes.",
    "expectedOutput": "[0,2,1,0] → 1",
    "link": "https://leetcode.com/problems/peak-index-in-a-mountain-array/"
  },
  {
    "id": 12,
    "title": "Search Insert Position with Bug",
    "language": "C++",
    "code": "int searchInsert(vector<int>& nums, int target) {\n    int l = 0, r = nums.size() - 1;\n    while (l <= r) {\n        int m = (l + r) / 2;\n        if (nums[m] == target) return m;\n        else if (nums[m] < target) l = m + 1;\n        else r = m - 1;\n    }\n    return r;\n}",
    "hint": "After the loop, where does `l` and `r` land in relation to the insertion point?",
    "ans": "Should return `l`, not `r`, to get the correct insert index.",
    "expectedOutput": "[1,3,5,6], target=2 → 1",
    "link": "https://leetcode.com/problems/search-insert-position/"
  },
  {
    "id": 13,
    "title": "strStr() with Bug",
    "language": "C++",
    "code": "int strStr(string haystack, string needle) {\n    if (needle.empty()) return 0;\n    for (int i = 0; i + needle.size() <= haystack.size(); ++i) {\n        int j = 0;\n        while (j < needle.size() && haystack[i + j] == needle[j])\n            --j;\n        if (j == needle.size()) return i;\n    }\n    return -1;\n}",
    "hint": "What should you return when the substring isn’t found?",
    "ans": "There should be `++j` instead of `--j`",
    "expectedOutput": "haystack = \"hello\", needle = \"ll\" → 2",
    "link": "https://leetcode.com/problems/implement-strstr/"
  },
  {
    "id": 14,
    "title": "Selection Sort Implementation with Bug",
    "language": "C++",
    "code": "void selectionSort(vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n; ++i) {\n        int minIdx = i;\n        for (int j = i; j < n; ++j) {\n            if (arr[j] < arr[minIdx]) minIdx = j;\n        }\n        swap(arr[i], arr[minIdx]);\n    }\n}",
    "hint": "Think about whether you should include `i` itself when searching for the minimum.",
    "ans": "Inner loop should start at `j = i + 1`, not `j = i`, though including `i` still works functionally—this one is tricky edge-case when `i` equals `minIdx`.",
    "expectedOutput": "[64, 25, 12, 22, 11] → [11,12,22,25,64]",
    "link": "https://en.wikipedia.org/wiki/Selection_sort"
  },

  {
    "id": 15,
    "title": "Find Pivot Index with Bug",
    "language": "C++",
    "code": "int pivotIndex(vector<int>& nums) {\n    int total = accumulate(nums.begin(), nums.end(), 0);\n    int leftSum = 0;\n    for (int i = 0; i < nums.size(); ++i) {\n        leftSum += nums[i];\n        if (leftSum == total - leftSum)\n            return i;\n    }\n    return -1;\n}",
    "hint": "Think about what `leftSum` represents before you include `nums[i]`.",
    "ans": "Check equality before adding `nums[i]` to `leftSum`; the current logic includes `nums[i]` on both sides incorrectly.",
    "expectedOutput": "[1, 7, 3, 6, 5, 6] → 3",
    "link": "https://leetcode.com/problems/find-pivot-index/"
  },
  {
    "id": 16,
    "title": "Rotate Array with Bug",
    "language": "C++",
    "code": "void rotate(vector<int>& nums, int k) {\n    int n = nums.size();\n    k %= n;\n    reverse(nums.begin(), nums.begin() + k);\n    reverse(nums.begin() + k, nums.end());\n    reverse(nums.begin(), nums.end());\n}",
    "hint": "Check the order of your reversals.",
    "ans": "The first two `reverse` calls use wrong segments; should reverse last k then first n-k.",
    "expectedOutput": "[1,2,3,4,5,6,7], k=3 → [5,6,7,1,2,3,4]",
    "link": "https://leetcode.com/problems/rotate-array/"
  },
  {
    "id": 17,
    "title": "Plus One with Bug",
    "language": "C++",
    "code": "vector<int> plusOne(vector<int>& digits) {\n    for (int i = digits.size() - 1; i >= 0; --i) {\n        if (digits[i] < 9) {\n            digits[i]++;\n            break;\n        }\n        digits[i] = 0;\n    }\n    return digits;\n}",
    "hint": "What happens if all digits are 9?",
    "ans": "Never handles the carry creating a new leading 1; needs to insert 1 at front when loop completes.",
    "expectedOutput": "[9,9,9] → [1,0,0,0]",
    "link": "https://leetcode.com/problems/plus-one/"
  }
]